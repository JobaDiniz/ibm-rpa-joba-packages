Ó,defVar --name __dummyFilePathForPowershell --type String
defVar --name __success --type Boolean
defVar --name process --type DataTable --output 
defVar --name processId --type Numeric --output 
defVar --name processName --type String --output 
defVar --name __pidText --type String
defVar --name methodName --type String --parameter 
defVar --name filePath --type String --parameter 
defVar --name fileNameWithoutExtension --type String --output 
defVar --name fileName --type String --output 
defVar --name fileExtension --type String
defVar --name methodNames --type List --innertype String --parameter 
defVar --name environmentVariable --type String --parameter  --output 
defVar --name workingDirectory --type String
//************************************
//Template for packages
//- Create routines and this template exposes them as methods.
//- To understand how to create packages using this template, read https://ibm.github.io/ibm-rpa-cli/#/guide/creating-packages
//************************************
//Set the working directory where all local .wal files are located. Always use 'workingDirectory' variable in the 'executeScript' to reference the scripts.
//- The build process will ignore 'executeScripts' that do not reference local .wal files using 'workingDirectory'.
//- DO NOT publish or use published scripts in the 'executeScript'. The build process will buil ONE script with all the local referenced dependencies.
//- Also, this will ensure your dev team only has to change one variable (workingDirectory) to run the project.
//- If you call an 'executeScript', always pass the 'workingDirectory' variable as a parameter, so you do not need to set in every script.
//- To store the source code .wal files, use GIT. Do not use the Control Center to store the .wal files.
setVarIf --variablename "${workingDirectory}" --value "C:\\Users\\002742631\\source\\repos\\IBM\\ibm-rpa-cli\\src\\Joba.IBM.RPA.Cli\\bin\\Debug\\net7.0" --left "${workingDirectory}" --operator "Is_Null_Or_Empty" --comment "The build process will inject the correct value for \'workingDirectory\' at runtime."
#region validating
case --switches "CaseSwitchesAll"
	when --left "${methodName}" --operator "Is_Null_Or_Empty"
	when --left "${methodNames}" --operator "Is_Empty"
then
	failTest --message "The parameter \'methodName\' or \'methodNames\' is required and was not specified"
endCase
#endregion

if --left "${methodName}" --operator "Is_Null_Or_Empty" --negate 
	add --collection "${methodNames}" --value "${methodName}"
endIf
foreach --collection "${methodNames}" --variable "${methodName}" --distinct 
	assert --message "The method \'${methodName}\' is not defined in ${rpa:scriptName} version ${rpa:scriptVersion}" --left "${rpa:scriptMetadata.Routines}" --operator "Contains" --right "${methodName}"
	goSub --label "${methodName}"
endFor
beginSub --name CurrentProcess
writeToFile --value dummy --createrandomfile  --encoding "Default" __dummyFilePathForPowershell=value

powerShell --apartmentState "MTA" --script "GET-PROCESS -Id $PID | SELECT -ExpandProperty \"ProcessName\" | OUT-FILE -FilePath \"${__dummyFilePathForPowershell}\"" __success=success
readAllText --filepath "${__dummyFilePathForPowershell}" --encoding "Default" processName=value
trimString --text "${processName}" --trimoption "TrimStartAndEnd" processName=value

powerShell --apartmentState "MTA" --script "$PID | OUT-FILE -FilePath \"${__dummyFilePathForPowershell}\"" __success=success
readAllText --filepath "${__dummyFilePathForPowershell}" --encoding "Default" __pidText=value
trimString --text "${__pidText}" --trimoption "TrimStartAndEnd" __pidText=value
convertStringToNumber --culture "en-US" --text "${__pidText}" processId=value

addColumn --dataTable ${process} --columnname Pid --type Numeric
addColumn --dataTable ${process} --columnname "Process Name" --type String
addRow --valuesmapping "Pid=${processId},Process Name=${processName}" --dataTable ${process}

onError --executenext  --comment "if an error occurs in the \'delete file\' below, ignore it"
fileDelete --file "${__dummyFilePathForPowershell}"
endSub
beginSub --name FileName
writeToFile --value dummy --createrandomfile  --encoding "UTF8" __dummyFilePathForPowershell=value

powerShell --apartmentState "MTA" --script "SPLIT-PATH -PATH \"${filePath}\" -Leaf | OUT-FILE -FilePath \"${__dummyFilePathForPowershell}\""
readAllText --filepath "${__dummyFilePathForPowershell}" --encoding "Default" fileName=value
trimString --text "${fileName}" --trimoption "TrimStartAndEnd" fileName=value

onError --executenext 
fileDelete --file "${__dummyFilePathForPowershell}"
endSub
beginSub --name FileNameWithoutExtension
goSub --label FileName
getRegex --text "${fileName}" --regexPattern "[a-z0-9\\- ]+(?<extension>\\.\\w+)" --regexOptions "IgnoreCase" --groupname extension fileExtension=value
replaceText --texttoparse "${fileName}" --textpattern "${fileExtension}" fileNameWithoutExtension=value
endSub
beginSub --name ExpandEnvironmentVariables
writeToFile --value dummy --createrandomfile  --encoding "UTF8" __dummyFilePathForPowershell=value

powerShell --apartmentState "MTA" --script "[System.Environment]::ExpandEnvironmentVariables(\"${environmentVariable}\")  | OUT-FILE -FilePath \"${__dummyFilePathForPowershell}\""
readAllText --filepath "${__dummyFilePathForPowershell}" --encoding "Default" environmentVariable=value
trimString --text "${environmentVariable}" --trimoption "TrimStartAndEnd" environmentVariable=value

onError --executenext  --comment "if an error occurs in the \'delete file\' below, ignore it"
fileDelete --file "${__dummyFilePathForPowershell}"
endSub*23.0.7.0